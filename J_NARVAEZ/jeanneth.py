# -*- coding: utf-8 -*-
"""JEANNETH.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Be5mnLYogAPhqBZ3Z4ppQX_K4bJUwqi7

###El ejercicio práctico lo he realizado en  Google Colab
###Nombre: Jeanneth Narváez Lamar
###Email: jeannarvaez@hotmail.com
"""

import pandas as pd

"""#####Importamos el módulo random, que se utiliza para generar números aleatorios.

"""

import random

"""#####Definimos la función mi_matriz(n): Esta función n es un número entero n que representa el tamaño de la matriz cuadrada que se generará. Dentro de la función, utilizamos un bucle for anidado para crear una matriz vacía para ir llenándola con números aleatorios entre 0 y 9. La matriz finalmente se devuelve como resultado."""

def mi_matriz(n):
    """
    Genera una matriz cuadrada de tamaño n x n y la llena con números aleatorios entre 0 y 9.
    """
    matriz = []
    for i in range(n):
        fila = []
        for j in range(n):
            fila.append(random.randint(0, 9))
        matriz.append(fila)
    return matriz

"""#####Definimos la función imprime_matriz(matriz): Esta función recibe una matriz como argumento y se encarga de imprimir los elementos de la matriz. Utilizamos bucles for anidados para recorrer las filas y columnas de la matriz para después imprimir cada elemento."""

def imprime_matriz(matriz):
    """
    Imprime la matriz en pantalla.
    """
    for fila in matriz:
        for elemento in fila:
            print(elemento, end=" ")
        print()

"""#####Definimos la función calculame_sumas(matriz): Esta función recibe una matriz como argumento y calcula la suma de los elementos de cada fila y columna. Utilizamos bucles for para recorrer la matriz y sumar los elementos correspondientes.
#####Después, guardamos las sumas de las filas en una lista sumame_filas y las sumas de las columnas en una lista sumame_columnas.
#####Por último, nos devuelve las dos listas de sumas como resultado.
"""

def calculame_sumas(matriz):
    """
    Calcula la suma de los elementos de cada fila y columna de la matriz.
    Devuelve dos listas: las sumas de las filas y las sumas de las columnas.
    """
    sumame_filas = []
    sumame_columnas = []
    for fila in matriz:
        sumame_fila = sum(fila)
        sumame_filas.append(sumame_fila)
    for j in range(len(matriz[0])):
        sumame_columna = sum(matriz[i][j] for i in range(len(matriz)))
        sumame_columnas.append(sumame_columna)
    return sumame_filas, sumame_columnas

"""#####Definimos la función imprime_sumas(sumame_filas, sumame_columnas): Esta función recibe las listas de sumas de filas y de sumas de columnas, se encarga de imprimir las sumas correspondientes.
#####Utilizamos bucles for para iterar sobre las listas y mostrar cada suma en pantalla, con un mensaje explicativo antes de las sumas de las filas y columnas.
"""

def imprime_sumas(sumame_filas, sumame_columnas):
    """
    Imprime las sumas de cada fila y sumas de cada columna en pantalla.
    """
    print("Suma de cada fila:")
    for sumame_fila in sumame_filas:
        print(sumame_fila)
    print("Suma de cada columna:")
    for sumame_columna in sumame_columnas:
        print(sumame_columna)

"""#####Definimos la función main():en la citada función utilizamos un bloque try-except para capturar posibles excepciones que puedan suceder durante la ejecución del programa cuando el usuario ingrese el tamaño de la matriz.
##### Dentro del bloque try, solicitaremos al usuario que ingrese el tamaño de la matriz cuadrada.
#####1- Sí el valor ingresado es válido (mayor que 0), inmediatamente se generará la matriz, se imprimirá, se calcularán las sumas y se imprimirán en pantalla.
#####2- En caso de que haya una excepción, sí el usuario ingresa un valor no válido (por ejemplo, un número negativo, cero o no entero), se mostrará un mensaje de error.  
#####Llamamos a la función main() para iniciar la ejecución del programa.
"""

def main():
    try:
        # Solicitamos al usuario el tamaño de la matriz
        n = int(input("Ingrese el tamaño de la matriz cuadrada: "))

        if n <= 0:
            raise ValueError("El tamaño de la matriz tiene que ser un número entero positivo.")

        # Generamos e imprimimos la matriz
        matriz = mi_matriz(n)
        print("Matriz creada:")
        imprime_matriz(matriz)

        # Calculamos e imprimimos las sumas de filas y columnas
        sumame_filas, sumame_columnas = calculame_sumas(matriz)
        imprime_sumas(sumame_filas, sumame_columnas)

    except ValueError as e:
        print("Error:", e)

if __name__ == "__main__":
    main()

"""#####Como podemos observar al introducir el usuario el número 3(positivo y mayor que que 0) y ejecutar este programa, se generará una matriz de tamaño 3x3 con números aleatorios entre 0 y 9 e imprimirá la matriz en pantalla.
##### La matriz se mostrará con sus respectivas de filas y columnas.
##### Después se calcularán y mostrarán las sumas de las filas y columnas, tal como hemos especificado en el código del programa.

###Probamos para el caso en el que  usuario introduce el número cero: 0
"""

def main():
    try:
        # Solicitamos al usuario el tamaño de la matriz
        n = int(input("Ingrese el tamaño de la matriz cuadrada: "))

        if n <= 0:
            raise ValueError("El tamaño de la matriz tiene que ser un número entero positivo.")

        # Generamos e imprimimos la matriz
        matriz = mi_matriz(n)
        print("Matriz creada:")
        imprime_matriz(matriz)

        # Calculamos e imprimimos las sumas de filas y columnas
        sumame_filas, sumame_columnas = calculame_sumas(matriz)
        imprime_sumas(sumame_filas, sumame_columnas)

    except ValueError as e:
        print("Error:", e)

if __name__ == "__main__":
    main()

"""#####Podemos observar al introducir el usuario el número 0 (donde cero no es número positivo y mayor que que 0) al ejecutar este programa, mostrará el error: "El tamaño de la matriz tiene que ser un número entero positivo".

###Probamos para el caso en el que usuario introduce el número negativo: -2
"""

def main():
    try:
        # Solicitamos al usuario el tamaño de la matriz
        n = int(input("Ingrese el tamaño de la matriz cuadrada: "))

        if n <= 0:
            raise ValueError("El tamaño de la matriz tiene que ser un número entero positivo.")

        # Generamos e imprimimos la matriz
        matriz = mi_matriz(n)
        print("Matriz creada:")
        imprime_matriz(matriz)

        # Calculamos e imprimimos las sumas de filas y columnas
        sumame_filas, sumame_columnas = calculame_sumas(matriz)
        imprime_sumas(sumame_filas, sumame_columnas)

    except ValueError as e:
        print("Error:", e)

if __name__ == "__main__":
    main()

"""#####Podemos observar al introducir el usuario el número -2 (donde -2 no es número positivo y mayor que que 0) al ejecutar este programa, mostrará el error: "El tamaño de la matriz tiene que ser un número entero positivo".

###Pruebas unitarias para verificar que el programa funcione correctamente:

#####Importamos los módulos necesarios para las pruebas unitarias, random: para generar números aleatorios y unittest: para realizar las pruebas.
"""