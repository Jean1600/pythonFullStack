# -*- coding: utf-8 -*-
"""Pruebas_Unitarias.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RWdvx2t73Jo2edwd8FcAQbNDmyg1q6c-

###La segunda parte del ejercicio práctico lo he realizado en Google Colab

Nombre: Jeanneth Narváez Lamar

Email: jeannarvaez@hotmail.com

###Pruebas unitarias para verificar que el programa funcione correctamente:
"""

import pandas as pd

"""#####1- Importamos los módulos necesarios para las pruebas unitarias, random: para generar números aleatorios y unittest: para realizar las pruebas."""

import random
import unittest

"""#####2- Copiamos las funciones mi_matriz() y calculame_sumas() que vamos a probar, (las citadas funciones definimos en la primera parte del ejercicio).
#####Función: mi_matriz() genera una matriz cuadrada con números aleatorios
#####Función: calculame_sumas() calcula las sumas de las filas y columnas de una matriz dada.
"""

def mi_matriz(n):
    """
    Genera una matriz cuadrada de tamaño n x n y la llena con números aleatorios entre 0 y 9.
    """
    matriz = []
    for i in range(n):
        fila = []
        for j in range(n):
            fila.append(random.randint(0, 9))
        matriz.append(fila)
    return matriz

def calculame_sumas(matriz):
    """
    Calcula la suma de los elementos de cada fila y columna de la matriz.
    Devuelve dos listas: las sumas de las filas y las sumas de las columnas.
    """
    sumame_filas = []
    sumame_columnas = []
    for fila in matriz:
        sumame_fila = sum(fila)
        sumame_filas.append(sumame_fila)
    for j in range(len(matriz[0])):
        sumame_columna = sum(matriz[i][j] for i in range(len(matriz)))
        sumame_columnas.append(sumame_columna)
    return sumame_filas, sumame_columnas

"""#####3- Definimos dos clases de pruebas: TestMiMatriz y TestCalculameSumas, las citadas clases contendrán los métodos de prueba que verifican el coportamiento esperado de las correspondientes funciones, cada una hereda de unittest.TestCase.
#####3.1- Definimos pruebas para la función TestMiMatriz: probamos que la matriz generada tiene el tamaño correcto y que los elementos están en el rango esperado. Es decir esta clase contiene dos métodos de prueba (test_matriz_tamano_correcto y test_matriz_elementos_entre_0_y_9).

"""

class TestMiMatriz(unittest.TestCase):

    def test_matriz_tamano_correcto(self):
        n = 5
        matriz = mi_matriz(n)
        self.assertEqual(len(matriz), n)
        for fila in matriz:
            self.assertEqual(len(fila), n)

    def test_matriz_elementos_entre_0_y_9(self):
        n = 5
        matriz = mi_matriz(n)
        for fila in matriz:
            for elemento in fila:
                self.assertGreaterEqual(elemento, 0)
                self.assertLessEqual(elemento, 9)

"""#####En el anterior código realizamos las dos pruebas:
#####test_matriz_tamano_correcto():  En esta prueba, se verifica que la función mi_matriz() genere una matriz cuadrada de tamaño n x n, donde n es igual a 5. Cuando n = 5: Se define un valor de n igual a 5, que se usará para generar una matriz cuadrada de 5x5.
#####test_matriz_elementos_entre_0_y_9():  En esta prueba, se verifica que todos los elementos de la matriz generada por mi_matriz() estén en el rango entre 0 y 9. Al igual que en la prueba anterior, se define n como 5: n=5

#####3.2- Definimos pruebas para la función TestCalculameSumas: probamos que las sumas de filas y columnas se calculan correctamente para una matriz dada.
"""

class TestCalculameSumas(unittest.TestCase):

    def test_sumas_filas_y_columnas(self):
        matriz = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]
        sumame_filas, sumame_columnas = calculame_sumas(matriz)
        self.assertEqual(sumame_filas, [6, 15, 24])
        self.assertEqual(sumame_columnas, [12, 15, 18])

"""#####En el anterior código realizamos una clase de pruebas unitarias llamada TestCalculameSumas.
#####La citada clase contiene un método de prueba llamado test_sumas_filas_y_columnas que verifica el correcto funcionamiento de la función calculame_sumas().
#####matriz = [...]: definimos  una matriz de prueba con 3 filas y 3 columnas. Esta matriz utilizamos para verificar las sumas de sus filas y columnas.
##### self.assertEqual(sumame_filas, [6, 15, 24]): Utilizamos self.assertEqual() para verificar si las sumas de las filas obtenidas (sumame_filas) coinciden con las sumas esperadas [6, 15, 24]. Esto comprueba que las sumas de las filas se han calculado correctamente.

#####4- En el bloque if __name__ == "__main__":, cargamos las pruebas utilizando unittest.TestLoader().
#####Después agregamos las pruebas a una suite (unittest.TestSuite()) y ejecutamos las pruebas utilizando unittest.TextTestRunner().
##### El resultado se muestra en la salida del Notebook, indicando si todas las pruebas han pasado correctamente o si se ha detectado algún error.
"""

if __name__ == "__main__":
    # Cargar las pruebas
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()

    suite.addTests(loader.loadTestsFromTestCase(TestMiMatriz))
    suite.addTests(loader.loadTestsFromTestCase(TestCalculameSumas))

    # Ejecutar las pruebas
    runner = unittest.TextTestRunner()
    result = runner.run(suite)

"""#####La salida del código anterior nos ha dado el mensaje OK.
#####Hemos realizado las pruebas definidas en las clases TestMiMatriz y TestCalculameSumas al ejecutar el código anterior.
#####Nos ha mostrado el  mensaje "OK" porque todas las pruebas han pasado correctamente. En caso contrario, se mostrarán mensajes de error.
"""